// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  username            String               @unique
  password            String // Added secure password storage
  isVerified          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  elo                 Json                 @default("{}") // JSONB, e.g., {'chess': 800}
  preferences         Json                 @default("{}") // JSONB
  subscriptionStatus  String?
  stripeCustomerId    String?              @unique
  gamePlayers         GamePlayer[]
  chatMessages        ChatLog[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]
  tokenBlacklist      TokenBlacklist[]
  subscription        Subscription?
  paymentRecords      PaymentRecord[]
}

model Game {
  id          String       @id @default(uuid())
  gameType    String // e.g., 'chess'
  state       String // e.g., PGN for chess
  result      String? // e.g., '1-0', '0-1', '1/2-1/2'
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gamePlayers GamePlayer[]
  chatLogs    ChatLog[]
}

model GamePlayer {
  id       String  @id @default(uuid())
  gameId   String
  userId   String? // null for AI
  isAi     Boolean @default(false)
  role     String // e.g., 'white', 'black'
  metadata Json    @default("{}") // JSONB
  game     Game    @relation(fields: [gameId], references: [id])
  user     User?   @relation(fields: [userId], references: [id])
}

model ChatLog {
  id        String   @id @default(uuid())
  gameId    String
  userId    String? // null for AI
  isAi      Boolean  @default(false)
  message   String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model SubscriptionPlan {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  price         Float
  interval      String // monthly, yearly, etc.
  currency      String   @default("USD")
  features      Json? // Array of features included in this plan
  stripePriceId String   @unique
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Subscription {
  id                   String    @id @default(uuid())
  userId               String    @unique
  planName             String // Reference to plan name for simpler querying
  stripeCustomerId     String?
  stripePriceId        String?
  stripeSubscriptionId String?
  status               String // active, canceled, past_due, trialing, etc.
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentRecord {
  id              String   @id @default(uuid())
  userId          String
  subscriptionId  String?
  amount          Float
  currency        String   @default("USD")
  status          String // succeeded, failed, pending
  paymentMethod   String? // card, paypal, etc.
  stripePaymentId String?
  stripeInvoiceId String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnalyticsEvent {
  id        String   @id @default(uuid())
  userId    String?
  eventType String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
