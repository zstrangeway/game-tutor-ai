// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  email              String       @unique
  username           String       @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  elo                Json         @default("{}") // JSONB, e.g., {'chess': 800}
  preferences        Json         @default("{}") // JSONB
  subscriptionStatus String?
  gamePlayers        GamePlayer[]
  chatMessages       ChatLog[]
}

model Game {
  id          String       @id @default(uuid())
  gameType    String // e.g., 'chess'
  state       String // e.g., PGN for chess
  result      String? // e.g., '1-0', '0-1', '1/2-1/2'
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gamePlayers GamePlayer[]
  chatLogs    ChatLog[]
}

model GamePlayer {
  id       String  @id @default(uuid())
  gameId   String
  userId   String? // null for AI
  isAi     Boolean @default(false)
  role     String // e.g., 'white', 'black'
  metadata Json    @default("{}") // JSONB
  game     Game    @relation(fields: [gameId], references: [id])
  user     User?   @relation(fields: [userId], references: [id])
}

model ChatLog {
  id        String   @id @default(uuid())
  gameId    String
  userId    String? // null for AI
  isAi      Boolean  @default(false)
  message   String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Subscription {
  id                   String    @id @default(uuid())
  userId               String    @unique
  stripeCustomerId     String?
  stripePriceId        String?
  stripeSubscriptionId String?
  status               String
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model AnalyticsEvent {
  id        String   @id @default(uuid())
  userId    String?
  eventType String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
}
